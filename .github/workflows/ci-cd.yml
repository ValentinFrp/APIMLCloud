name: CI/CD Pipeline - Housing Price Prediction API

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  DOCKER_IMAGE: housing-price-api
  REGISTRY: ghcr.io

jobs:
  test:
    name: Tests & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pytest-cov semgrep safety

      - name: Code formatting check (Black)
        run: |
          black --check --diff src/ tests/

      - name: Linting (Flake8)
        run: |
          flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Security check (Semgrep)
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json

      - name: Dependency vulnerability check (Safety)
        run: |
          safety check --save-json safety-report.json || echo "Safety check completed"

      - name: Train model for tests
        run: |
          cd src
          python train_model.py
          cd ..

      - name: Run unit tests with coverage
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            semgrep-report.json
            safety-report.json
            htmlcov/
            coverage.xml

  build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Train model for Docker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          cd src && python train_model.py && cd ..

          ls -la models/ data/
          test -f models/housing_model.joblib && echo "Model ready"
          test -f data/housing_data.csv && echo "Data ready"

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          echo "Available Docker images:"
          docker images

          if ! docker images | grep -q "${{ env.DOCKER_IMAGE }}"; then
            echo "Error: Image ${{ env.DOCKER_IMAGE }}:test not found"
            exit 1
          fi

          echo "Starting container..."
          docker run -d --name test-api -p 8000:8000 ${{ env.DOCKER_IMAGE }}:test

          echo "Waiting for container to start..."
          for i in {1..30}; do
            if docker ps | grep -q test-api; then
              echo "Container is running"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

          docker ps -a
          docker logs test-api

          echo "Waiting for API to be ready..."
          for i in {1..20}; do
            if curl -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "API is ready!"
              break
            fi
            echo "API not ready yet... ($i/20)"
            sleep 3
          done

          echo "Testing health endpoint..."
          curl -f http://localhost:8000/health

          echo "Testing prediction endpoint..."
          curl -X POST "http://localhost:8000/predict" \
            -H "Content-Type: application/json" \
            -d '{
              "surface": 85.0,
              "rooms": 4,
              "age": 10.0,
              "location_score": 7.5,
              "garage": true
            }'

          echo "Stopping container..."
          docker stop test-api
          docker rm test-api

      - name: Save Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker save ${{ env.DOCKER_IMAGE }}:test | gzip > docker-image.tar.gz

      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar.gz
          retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load < docker-image.tar.gz

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:test
          format: "table"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load < docker-image.tar.gz

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push to registry
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:test ${{ env.REGISTRY }}/${{ github.repository }}:staging
          docker tag ${{ env.DOCKER_IMAGE }}:test ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ github.repository }}:staging
          docker push ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}

      - name: Deploy to staging (simulation)
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}:staging"
          echo "Staging URL: https://housing-api-staging.example.com"
          echo "Staging deployment completed!"

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          sleep 5
          echo "Staging smoke tests passed!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to production (simulation)
        run: |
          echo "Deploying to production environment..."
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ github.repository }}:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository }}:latest
          echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}:latest"
          echo "Production URL: https://housing-api.example.com"
          echo "Production deployment completed!"

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          sleep 5
          echo "Production smoke tests passed!"

      - name: Create deployment notification
        run: |
          echo "Deployment notification:"
          echo "Version: ${{ github.sha }}"
          echo "Environment: Production"
          echo "Status: Success"
          echo "Time: $(date -u)"

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load and start Docker container
        run: |
          docker load < docker-image.tar.gz
          docker run -d --name perf-test-api -p 8000:8000 ${{ env.DOCKER_IMAGE }}:test
          sleep 30

      - name: Install performance testing tools
        run: |
          pip install locust requests zope.event

      - name: Run performance tests
        run: |
          cat << 'EOF' > locustfile.py
          from locust import HttpUser, task, between
          import json

          class APIUser(HttpUser):
              wait_time = between(1, 3)

              @task(3)
              def test_health(self):
                  self.client.get("/health")

              @task(2)
              def test_model_info(self):
                  self.client.get("/model/info")

              @task(5)
              def test_predict(self):
                  payload = {
                      "surface": 85.0,
                      "rooms": 4,
                      "age": 10.0,
                      "location_score": 7.5,
                      "garage": True
                  }
                  self.client.post("/predict", json=payload)
          EOF

          locust -f locustfile.py --host=http://localhost:8000 \
            --users=10 --spawn-rate=2 --run-time=60s --html=performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: performance-report.html

      - name: Cleanup
        if: always()
        run: |
          docker stop perf-test-api || true
          docker rm perf-test-api || true

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Delete temporary artifacts
        run: |
          echo "Cleaning up temporary artifacts..."
          echo "Cleanup completed!"
